require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe TutorialsController do

  # This should return the minimal set of attributes required to create a valid
  # Tutorial. As you add validations to Tutorial, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "tutorial_name" => "MyString", "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TutorialsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all tutorials as @tutorials" do
      tutorial2 = Tutorial.new
tutorial2.tutorial_name = "2"
tutorial2.tutorial_discription = "da33s"
tutorial2.tutorial_path = "dsadsadsad3ad"
tutorial2.tutorial_teacher_name = "mi33s"
tutorial2.tutorial_date_release = DateTime.now
tutorial2.save
      get :index, {}, valid_session
      assigns(:tutorials).should eq([tutorial2])
    end
  end

  describe "GET show" do
    it "assigns the requested tutorial as @tutorial" do
           tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
      get :show, {:id => tutorial.to_param}, valid_session
      assigns(:tutorial).should eq(tutorial)
    end
  end

  describe "GET new" do
    it "assigns a new tutorial as @tutorial" do
      get :new, {}, valid_session
      assigns(:tutorial).should be_a_new(Tutorial)
    end
  end

  describe "GET edit" do
    it "assigns the requested tutorial as @tutorial" do
            tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
      get :edit, {:id => tutorial.to_param}, valid_session
      assigns(:tutorial).should eq(tutorial)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Tutorial" do
        expect {
          post :create, {:tutorial => { "tutorial_name" => "MyString",  "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" }}, valid_session
        }.to change(Tutorial, :count).by(1)
      end

      it "assigns a newly created tutorial as @tutorial" do
        post :create, {:tutorial => { "tutorial_name" => "MyString", "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" }}, valid_session
        assigns(:tutorial).should be_a(Tutorial)
        assigns(:tutorial).should be_persisted
      end

      it "redirects to the created tutorial" do
        post :create, {:tutorial => { "tutorial_name" => "MyString",  "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" }}, valid_session
        response.should redirect_to(Tutorial.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tutorial as @tutorial" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tutorial.any_instance.stub(:save).and_return(false)
        post :create, {:tutorial => { "tutorial_name" => "invalid value" }}, valid_session
        assigns(:tutorial).should be_a_new(Tutorial)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Tutorial.any_instance.stub(:save).and_return(false)
        post :create, {:tutorial => { "tutorial_name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested tutorial" do
              tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
        # Assuming there are no other tutorials in the database, this
        # specifies that the Tutorial created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Tutorial.any_instance.should_receive(:update_attributes).with({ "tutorial_name" => "MyString" })
        put :update, {:id => tutorial.to_param, :tutorial => { "tutorial_name" => "MyString" }}, valid_session
      end

      it "assigns the requested tutorial as @tutorial" do
           tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
        put :update, {:id => tutorial.to_param, :tutorial => { "tutorial_name" => "MyString", "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" }}, valid_session
        assigns(:tutorial).should eq(tutorial)
      end

      it "redirects to the tutorial" do
              tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
        put :update, {:id => tutorial.to_param, :tutorial => { "tutorial_name" => "MyString", "tutorial_date_release" => DateTime.now, "tutorial_discription" => "dsadsad", "tutorial_teacher_name" => "Teacher", "tutorial_path" => "dsadsad" }}, valid_session
        response.should redirect_to(tutorial)
      end
    end

    describe "with invalid params" do
      it "assigns the tutorial as @tutorial" do
              tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
        # Trigger the behavior that occurs when invalid params are submitted
        Tutorial.any_instance.stub(:save).and_return(false)
        put :update, {:id => tutorial.to_param, :tutorial => { "tutorial_name" => "invalid value" }}, valid_session
        assigns(:tutorial).should eq(tutorial)
      end

      it "re-renders the 'edit' template" do
              tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
        # Trigger the behavior that occurs when invalid params are submitted
        Tutorial.any_instance.stub(:save).and_return(false)
        put :update, {:id => tutorial.to_param, :tutorial => { "tutorial_name" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested tutorial" do
      tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
      expect {
        delete :destroy, {:id => tutorial.to_param}, valid_session
      }.to change(Tutorial, :count).by(-1)
    end

    it "redirects to the tutorials list" do
           tutorial = Tutorial.new
tutorial.tutorial_name = "dsadsa"
tutorial.tutorial_discription = "dasdsadas"
tutorial.tutorial_path = "dsadsadsadsadsad"
tutorial.tutorial_teacher_name = "miss"
tutorial.tutorial_date_release = DateTime.now
tutorial.save
      delete :destroy, {:id => tutorial.to_param}, valid_session
      response.should redirect_to(tutorials_url)
    end
  end

  
 describe "GET Math" do
    it "assigns all math tutorials as @tutorials" do
      tutorial2 = Tutorial.new
tutorial2.tutorial_name = "2"
tutorial2.tutorial_discription = "da33s"
tutorial2.tutorial_path = "dsadsadsad3ad"
tutorial2.tutorial_teacher_name = "mi33s"
tutorial2.tutorial_date_release = DateTime.now
tutorial2.save
      get :Math, {}, valid_session
      response.should render_template("Math")
    end
  end

 describe "GET Reading" do
    it "assigns all math tutorials as @tutorials" do
      tutorial2 = Tutorial.new
tutorial2.tutorial_name = "2"
tutorial2.tutorial_discription = "da33s"
tutorial2.tutorial_path = "dsadsadsad3ad"
tutorial2.tutorial_teacher_name = "mi33s"
tutorial2.tutorial_date_release = DateTime.now
tutorial2.save
      get :Reading, {}, valid_session
      response.should render_template("Reading")
    end
  end

 describe "GET search" do
    it "assigns all math tutorials as @tutorials" do
      tutorial2 = Tutorial.new
tutorial2.tutorial_name = "2"
tutorial2.tutorial_discription = "da33s"
tutorial2.tutorial_path = "dsadsadsad3ad"
tutorial2.tutorial_teacher_name = "mi33s"
tutorial2.tutorial_date_release = DateTime.now
tutorial2.save
      get :search, {"2"}, valid_session
      response.should render_template("search")
    end
  end
 describe "GET Writing" do
    it "assigns all math tutorials as @tutorials" do
      tutorial2 = Tutorial.new
tutorial2.tutorial_name = "2"
tutorial2.tutorial_discription = "da33s"
tutorial2.tutorial_path = "dsadsadsad3ad"
tutorial2.tutorial_teacher_name = "mi33s"
tutorial2.tutorial_date_release = DateTime.now
tutorial2.save
      get :Writing, {}, valid_session
      response.should render_template("Writing")
    end
  end
end

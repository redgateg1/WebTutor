require 'spec_helper'
require 'factory_girl_rails'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do
include AuthHelper
before(:each) do
http_login
end
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "first_name" => "MyString", "last_name" => "dsadsad", "username" => "yoaa221", "password" => "PaSs123K", "user_role" => "student" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }




  describe "GET show" do
    it "assigns the requested user as @user" do
#FactoryGirl.find_definitions
            user = User.new
user.first_name = "MyString"
user.username = "yoaa22"
user.password = "PaSs789K"
user.last_name = "dsadsad"
user.created_at = Time.now
user.subscribtion_expire ="05-05-2018"
user.save
      visit "/access/login"
 fill_in "Username", :with => "jdoe"
fill_in  "Password", :with => "secreT123KK"
click_button "Log In"
d = user.id
visit "/users/#{d}"
 # @request.env["HTTP_AUTHORIZATION"] = "Basic " + Base64::encode64("username:password")
    response.should be_success
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
  @request.env["HTTP_AUTHORIZATION"] = "Basic " + Base64::encode64("username:password")
      get :new, {}, valid_session
      assigns(:user).should be_a_new(User)
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
            user = User.new
user.first_name = "MyString"
user.username = "yoaa22"
user.password = "PaSs789K"
user.last_name = "dsadsad"
user.created_at = Time.now
user.subscribtion_expire ="05-05-2018"
user.save
      visit "/access/login"
 fill_in "Username", :with => "jdoe"
fill_in  "Password", :with => "secreT123KK"
click_button "Log In"
response.should be_success
d = user.id
visit "/users/#{d}/edit"
 # @request.env["HTTP_AUTHORIZATION"] = "Basic " + Base64::encode64("username:password")
    response.should be_success
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => { "first_name" => "MyString", "last_name" => "dsadsad", "username" => "yoaa221", "password" => "PaSs123K" }}, valid_session
        }.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        post :create, {:user => { "first_name" => "MyString", "last_name" => "dsadsad", "username" => "yoaa221", "password" => "PaSs123K" }}, valid_session
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the log in page" do
        post :create, {:user => { "first_name" => "MyString", "last_name" => "dsadsad", "username" => "yoaa221", "password" => "PaSs123K" }}, valid_session
        response.should redirect_to('/access/login')
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "first_name" => "invalid value" }}, valid_session
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => { "first_name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

 

 
end
